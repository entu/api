AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Entu API

Parameters:
  GitSha:
    Type: String
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  MongoDbUrl:
    Type: String
  JwtSecret:
    Type: String

Globals:
  Function:
    Environment:
      Variables:
        NODE_ENV: production
        GIT_SHA: !Ref GitSha
        MONGODB_URL: !Ref MongoDbUrl
        JWT_SECRET: !Ref JwtSecret
    # Architectures:
    #   - arm64
    Runtime: nodejs16.x
    MemorySize: 256
    Timeout: 30
    Layers:
      - !Ref LambdaLayer

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - DELETE
          - PUT
        AllowHeaders:
          - Authorization
          - Access-Control-Allow-Origin
          - Content-Type
        AllowOrigins:
          - "*"

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-dependencies"
      Description: Some code to share with the API
      ContentUri: layers
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  FunctionAccountGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-account-get"
      CodeUri: functions/account/
      Handler: get.handler
      Description: Returns account info and usage statistics
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /account
            Method: GET
            ApiId: !Ref HttpApi

  FunctionAuthGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-auth-get"
      CodeUri: functions/auth/
      Handler: get.handler
      Description: Authenticates user by API key
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /auth
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityListGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-list-get"
      CodeUri: functions/entity/
      Handler: get.handler
      Description: Get list of entities
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityListPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-list-post"
      CodeUri: functions/entity/
      Handler: post.handler
      Description: Create new entity
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity
            Method: POST
            ApiId: !Ref HttpApi

  FunctionEntityGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-get"
      CodeUri: functions/entity/
      Handler: get.handler
      Description: Get one entity with given id
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-post"
      CodeUri: functions/entity/
      Handler: get.handler
      Description: Add new properties to existing entity
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}
            Method: POST
            ApiId: !Ref HttpApi

  FunctionEntityDelete:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-delete"
      CodeUri: functions/entity/
      Handler: get.handler
      Description: Delete entity with given id
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}
            Method: DELETE
            ApiId: !Ref HttpApi

  FunctionPropertyGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-property-get"
      CodeUri: functions/property/
      Handler: get.handler
      Description: Get property with given id
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /property/{_id}
            Method: GET
            ApiId: !Ref HttpApi

  FunctionPropertyDelete:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-property-delete"
      CodeUri: functions/property/
      Handler: get.handler
      Description: Delete property with given id
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /property/{_id}
            Method: DELETE
            ApiId: !Ref HttpApi

Outputs:
  HttpApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
