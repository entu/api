AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Entu API

Parameters:
  Architecture:
    Type: String
    Default: arm64
  GitSha:
    Type: String
  DomainName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: entu-api-domain
  CertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: entu-api-certificate-arn
  HostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: entu-api-hosted-zone-id
  # VpcSubnet:
  #   Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
  #   Description: SSM Parameter store key of type StringList with the list of VPC Subnet to be used by Lambda function
  #   Default: /MyVpcSubnet
  # VpcSecurityGroup:
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
  #   Description: SSM Parameter store key of type String with the VPC Security Group to be used by Lambda function
  #   Default: /MyVpcSecurityGroup

Globals:
  Function:
    Environment:
      Variables:
        NODE_ENV: production
        GIT_SHA: !Ref GitSha
        STACK_NAME: !Sub "${AWS::StackName}"
    Architectures:
      - !Ref Architecture
    Runtime: nodejs18.x
    MemorySize: 256
    Timeout: 30
    Layers:
      - !Ref LambdaLayer
    # Properties:
    #   VpcConfig:
    #     SubnetIds: !Ref VpcSubnet
    #     SecurityGroupIds:
    #       - !Ref VpcSecurityGroup

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-dependencies"
      Description: Entu API dependencies
      ContentUri: layers
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete
    Metadata:
      BuildArchitecture: !Ref Architecture

  FunctionAccountGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-account-get"
      CodeUri: functions/account/
      Handler: get.handler
      Description: Returns account info and usage statistics
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /account
            Method: GET
            ApiId: !Ref HttpApi

  FunctionAuthGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-auth-get"
      CodeUri: functions/auth/
      Handler: get.handler
      Description: Authenticates user by API key
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /auth
            Method: GET
            ApiId: !Ref HttpApi

  FunctionAuthOauth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-auth-oauth"
      CodeUri: functions/auth/
      Handler: oauth.handler
      Description: Redirect user to OAuth.ee and authenticate user if request is redirected back from OAuth.ee
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /auth/{provider}
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityListGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-list-get"
      CodeUri: functions/entity/
      Handler: get.handler
      Description: Get list of entities
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - S3ReadPolicy:
            BucketName: "*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityListPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-list-post"
      CodeUri: functions/entity/
      Handler: post.handler
      Description: Create new entity
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - SQSSendMessagePolicy:
            QueueName: !Sub "${AWS::StackName}-*"
        - S3WritePolicy:
            BucketName: "*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity
            Method: POST
            ApiId: !Ref HttpApi

  FunctionEntityGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-get"
      CodeUri: functions/entity/
      Handler: get.handler
      Description: Get one entity with given id
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - S3ReadPolicy:
            BucketName: "*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-post"
      CodeUri: functions/entity/
      Handler: post.handler
      Description: Add new properties to existing entity
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - SQSSendMessagePolicy:
            QueueName: !Sub "${AWS::StackName}-*"
        - S3WritePolicy:
            BucketName: "*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}
            Method: POST
            ApiId: !Ref HttpApi

  FunctionEntityDelete:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-delete"
      CodeUri: functions/entity/
      Handler: delete.handler
      Description: Delete entity with given id
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - SQSSendMessagePolicy:
            QueueName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}
            Method: DELETE
            ApiId: !Ref HttpApi

  FunctionEntityHistoryGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-history-get"
      CodeUri: functions/entity/
      Handler: history.handler
      Description: Get entity history with given id
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}/history
            Method: GET
            ApiId: !Ref HttpApi

  FunctionEntityAggregateGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-entity-aggregate-get"
      CodeUri: functions/entity/
      Handler: aggregate.handler
      Description: Aggregate entity with given id
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - SQSPollerPolicy:
            QueueName: !Sub "${AWS::StackName}-*"
        - SQSSendMessagePolicy:
            QueueName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /entity/{_id}/aggregate
            Method: GET
            ApiId: !Ref HttpApi

  FunctionPropertyGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-property-get"
      CodeUri: functions/property/
      Handler: get.handler
      Description: Get property with given id
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - S3ReadPolicy:
            BucketName: "*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /property/{_id}
            Method: GET
            ApiId: !Ref HttpApi

  FunctionPropertyDelete:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-property-delete"
      CodeUri: functions/property/
      Handler: delete.handler
      Description: Delete property with given id
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}-*"
        - SQSSendMessagePolicy:
            QueueName: !Sub "${AWS::StackName}-*"
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /property/{_id}
            Method: DELETE
            ApiId: !Ref HttpApi

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-account-get"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-auth-get"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-auth-oauth-get"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-auth-oauth-post"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-entity-list-get"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-entity-list-post"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-entity-get"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-entity-post"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-entity-delete"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-entity-aggregate"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-property-get"
      RetentionInDays: 365

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-property-delete"
      RetentionInDays: 365

Outputs:
  HttpApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
